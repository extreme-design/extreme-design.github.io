{
  "FormalizeRequirements": {
    "click": {
      "type": "svg",
      "path": "img/schema2.svg"
    }
  },
  "CollectRequirements": {
    "click": {
      "type": "text",
      "title": "Collect Requirements",
      "body": "The <a href=\"Customer\">customer team</a>, made up by domain experts, provides the requirements that will guide the design and testing process  in the form of <a href=\"UserStories\">user stories</a>, using <a href=\"https://www.google.it/intl/it/forms/about/\">Google forms</a> or <a href=\"https://guides.github.com/features/issues/\">Github issues</a>."
    }
  },
  "UserStories": {
    "click": {
      "type": "text",
      "title": "User stories",
      "body": "A user story is a set of sentences which describe by example the kind of facts that the knowledge graph is required to encode. The <a href=\"Customer\">customer team</a> is instructed to break the possible complex stories into smaller and simpler ones.<br/>The length of a user story is limited to favour keeping them focused; its maximum length is decided by the design team.<br/>User stories may be described by<ul><li>priority level</li><li>title (to express possible dependencies of a story to others)</li><li>identifier (to express possible dependencies of a story to others)</li></ul>"
    }
  },
  "DefineTestCase": {
    "click": {
      "type": "svg",
      "path": "img/defineTestCases.svg"
    }
  },
  "DevelopModules": {
    "click": {
      "type": "svg",
      "path": "img/developModule.svg"
    }
  },
  "RunAlphaTesting": {
    "click": {
      "type": "svg",
      "path": "img/runAlphaTesting.svg"
    }
  },
  "RunBetaTesting": {
    "click": {
      "type": "svg",
      "path": "img/runBetaTesting.svg"
    }
  },
  "PublishStableRelease": {
    "click": {
      "type": "svg",
      "path": "img/publishStableRelease.svg"
    }
  },
  "CreateSmallerStories": {
    "click": {
      "type": "text",
      "title": "Create Smaller Stories",
      "body": "The customer team breaks possible complex stories into smaller and simpler ones."
    }
  },
  "EstablishGeneralConstraints": {
    "click": {
      "type": "text",
      "title": "Establish General Constraints and Competency Questions",
      "body": "The design team, in collaboration with the customer team derives general constraints and one or more competency questions from the generalization of user stories."
    }
  },
  "CompetencyQuestions": {
    "click": {
      "type": "text",
      "title": "Competency Questions",
      "body": "Competency questions (CQ) are the natural language counterpart of structured queries that we want to enable against the knowledge graph.<br/> The design team, in collaboration with the costumer team, identify the main concepts and the possible general constraints from the user stories to create CQs."
    }
  },
  "FormulateTestProcedures": {
    "click": {
      "type": "text",
      "title": "Formulate Test Procedure",
      "body": "Determine how to test that particular requirement.<br/>There are three types of testing procedure:<ul><li><b>Competency Question Verification.</b> this testing procedure allows to verify if the ontology is able to answer to te competency questions that have been collected during the requirement collection.</li><li><b>Error Provocation.</b> Another important characteristic of an ontology is to allow as few erroneous facts or inferences as possible. This category of testing is comparable to software testing when a system is fed random or incorrect data, or data considered as \"boundary values\" of the input, e.g. the extremes of value ranges, in order to check robustness.</li><li><b>Inference Verification.</b>This testing procedure allows to verify that the inference mechanisms are in place, to ensure the correct fulfillment of the inference requirement.</li></ul>"
    }
  },
	"DefineTestCaseDescription": {
    "click": {
      "type": "text",
      "title": "Define Test Case",
      "body": "Create a test case as defined by a testing framework (e.g. <a href=\"https://github.com/TESTaLOD/TESTaLOD\">TESTaLOD</a>, <a href=\"https://w3id.org/OWLunit\">OWL unit</a>)"
    }
  },
	"AddTestData": {
    "click": {
      "type": "text",
      "title": "Add Test Data",
      "body": "Add the test data, needed to perform the procedure according to the type of test you choose, creating a Toy Data. The data will use ephemeral prefixes that will be bound to the permanent URI of the ontology in the Run test phase"
    }
  },
	"DetermineExpectedResults": {
    "click": {
      "type": "text",
      "title": "Determine expected results",
      "body": "Depending on the test data, determine what output would be correct. For example, specify the data with testAnnotationSchema:hasExpectedResult property."
    }
  },
	"MatchCQWithODP": {
    "click": {
      "type": "text",
      "title": "Match CQ with ODP",
      "body": "The design team analyses possible existing ontology design patterns (ODPs) which can answer to the same CQ extracted from the requirement collection.<br/>Often ODP’s CQs are more general than the domain-specific CQs of an ontology project. In such case the designer will generalise the CQ’s further, to understand if the candidate ODP can be reused, and then specialize its properties and/or classes."
    }
  },
	"IntegrateThePattern": {
    "click": {
      "type": "text",
      "title": "Integrate the Pattern",
      "body": "Create a new piece of OWL ontology reusing or specializing properties and/or classes of candidate ODP."
    }
  },
	"CreateThePattern": {
    "click": {
      "type": "text",
      "title": "Create a New Pattern",
      "body": "You can define a permanent URI and implement the ODP in OWL, to publish the pattern in the ODP catalogue."
    }
  },
	"RunTest": {
    "click": {
      "type": "text",
      "title": "Run Test",
      "body": "Execute the procedure you choose on the test run OWL-file with its test data, and record the results."
    }
  },
	"Document": {
    "click": {
      "type": "text",
      "title": "Document",
      "body": "Store all information about the test run and its related test case by using the testAnnotationSchema:executionComment."
    }
  },
	"AddAnnotations": {
    "click": {
      "type": "text",
      "title": "Add Annotations",
      "body": "Annotate the ontology to link classes, properties and patterns to other ontologies.<br/>To annotate patterns you can use <a href=\"http://ontologydesignpatterns.org/opla/\">OPLA</a>."
    }
  },
	"AddExamples": {
    "click": {
      "type": "text",
      "title": "Add Examples",
      "body": "TODO"
    }
  },
	"PublishTheOntology": {
    "click": {
      "type": "text",
      "title": "Publish the Ontology",
      "body": "Publish the ontology on GitHub or on your own web server.<br/>To publish the ontology on GitHub: <ul><li>Create a repository for the ontology</li><li>Commit and push</li><li>Create a version tag</li><li>Publsh release</li></ul><br/>To publish the ontology on your own server:<ul><li>Create directory for the release</li><li>Upload the ontology</li></ul>"
    }
  },
	"RefactorAndIntegrate": {
    "click": {
      "type": "text",
      "title": "Refactor and integrate",
      "body": "TODO",
			"background":"red",
			"color":"white"
    }
  },
	"SubstituteEphemeralPrefixes": {
    "click": {
      "type": "text",
      "title": "Substitute Ephemeral Prefixes",
      "body": "TODO"
    }
  },
	"SubmitTheOntologyToADomainExpert": {
    "click": {
      "type": "text",
      "title": "Sumbmit the ontology to a domain expert",
      "body": "TODO"
    }
  },
	"Customer": {
    "click": {
      "type": "text",
      "title": "Customer",
      "body": "In the <a href=\"XDMethodology\">XD methodology</a>, the customer team is composed by domain experts eliciting the requirements that guide the design and testing process. Requirements are collected in the form of <a href=\"UserStories\">user stories</a>. The customer team is instructed <a href=\"CreateSmallerStories\">to break possible complex stories into smaller and simpler ones</a>."
    }
  },
	"XDMethodology": {
		"click": {
      "type": "text",
      "title": "XD Methodology",
      "body": "XD is an ontology design methodology that puts the reuse of <a href=\"ODPs\">Ontology Design Patterns (ODPs)</a> at its core both as a principle and as an explicit activity.<br/>The intensive use of<ul><li><a href=\"ODPs\">ODPs</a></li><li><a href=\"ModularDesign\">Modular Design</a></li><li><a href=\"TDD\">Test-driven approach</a></li></ul>are the main characterising principles of the method."
    }
	},
	"ODPs" : {
		"click": {
      "type": "text",
      "title": "Ontology Design Patterns",
      "body": "Ontology Design Patterns (ODPs) provide solutions to recurrent modelling issues. ODPs are small ontologies that mediate between use cases (problem types) and design solutions. They are used as modelling components: ideally, an ontology results from a composition of ODPs, with appropriate dependencies between them, plus the necessary design expansion based on specific needs.<br/>If you are not familiar with ODPs, they can be found on catalogues, such as:<ul><li><a href=\"http://www.gong.manchester.ac.uk/odp/html/\">the catalogue maintained by the University of Manchester</a></li><li><a href=\"http://ontologydesignpatterns.org/wiki/Main_Page\">The Ontology Design Pattern Portal<a></li><li><a href=\"http://ontologydesignpatterns.org/wiki/WOP:Main\">The Workshop on Ontology Design and Patterns series</a></li></ul>"
    }
	},
	"ModularDesign" : {
		"click": {
      "type": "text",
      "title": "Modular design",
      "body": "Separating the representation of requirements into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired requirement."
    }
	},
	"TDD": {
		"click": {
      "type": "text",
      "title": "Ontology Design Patterns",
      "body": "Ontology Design Patterns (ODPs) provide solutions to recurrent modelling issues. ODPs are small ontologies that mediate between use cases (problem types) and design solutions. They are used as modelling components: ideally, an ontology results from a composition of ODPs, with appropriate dependencies between them, plus the necessary design expansion based on specific needs.<br/>If you are not familiar with ODPs, they can be found on catalogues, such as:<ul><li><a href=\"http://www.gong.manchester.ac.uk/odp/html/\">the catalogue maintained by the University of Manchester</a></li><li><a href=\"http://ontologydesignpatterns.org/wiki/Main_Page\">The Ontology Design Pattern Portal<a></li><li><a href=\"http://ontologydesignpatterns.org/wiki/WOP:Main\">The Workshop on Ontology Design and Patterns series</a></li></ul>"
    }
	},
	"Designer": {
		"click": {
      "type": "text",
      "title": "Designer",
      "body": "In the <a href=\"XDMethodology\">XD methodology</a>, the design team is in charge of the design process by identifying and implementing the <a href=\"ODPs\">Ontology Design Patterns (ODPs)</a> that best address the given requirements. In collaboration with the <a href=\"Customer\">customer team</a>, the design team generalises the <a href=\"UserStories\">user stories</a> identifying the main concepts for eliciting the <a href=\"CompetencyQuestions\">CQs</a>."
    }
	},
	"Tester": {
		"click": {
      "type": "text",
      "title": "Tester",
      "body": "In the <a href=\"XDMethodology\">XD methodology</a>, the testing team performs testing and validation of the produced ontology components, working in parallel and interactively with the <a href=\"Designer\">design team</a>: the same requirements are used as input by the design team, for producing the ontology, and by the testing team, for translating them into unit tests."
    }
	},
	"IntegrationTeam" :{
		"click": {
      "type": "text",
      "title": "Integration Team",
      "body": "The integration team takes care of integrating the different components."
    }
	}
}
